   


   import java.awt.*;
   import java.util.*;
   /*****************************************************************
	* Icicle is a class that maintains information about its xPoints and yPoints. 
   * An Icicle knows how to return its the get the x and y value of its tip, its height,
	* and its base length.
   * The Icicle can also set its length as well as height.  
	
   * @author Tony Liang and Prateek Gunnam
	* @version 1
	****************************************************************/
   public class Icicle
   {
      private int[] myXPoints;  
      private int[] myYPoints;
      private final int nPoint = 3;
      private Color myColor; 
     
     /************************************************************* 
   	* Default constructor with predetermined xPoints, yPoints, 
      * initial yPosition specified by y. Sets pre-determined diameter.
   	**************************************************************/

      public Icicle()     
      {
         myXPoints = new int[]{200,250,225};
         myYPoints = new int[]{0, 0, 50};
         myColor = Color.WHITE;
      
      /************************************************************* 
   	* Constructs an Icicle with initial xPosition specified by xPoints and its
      * initial yPosition specified by yPoints and initial Color specified by c
   	* @param xPoints    initial xPosition
      * @param yPoints    initial yPosition
      * @param c          initial color
   	**************************************************************/
 
      }
      public Icicle(int[] xPoints, int[] yPoints, Color c)
      {  
         myXPoints = new int[]{xPoints[0],xPoints[1],xPoints[2]};
         myYPoints = new int[]{yPoints[0],yPoints[1],yPoints[2]};
         myColor = c;
         
      }
      /*************************************************************** 
   	* Returns the Icicles's Tip xPosition
   	* @return   xPosition of Point
   	**************************************************************/

      public int getX(int position) 
      { 
         return myXPoints[position];
      }
      /*************************************************************** 
   	* Returns the Icicles's Tip yPosition
   	* @return   yPosition of Point
   	**************************************************************/
      public int getY(int position)      
      { 
         return myYPoints[position];
      }
      /*************************************************************** 
   	* Returns the all Icicle's xPositions
   	* @return   xPositions of Icicle
   	**************************************************************/
      
      public int[] getXPoints()
      {
         return myXPoints;
      }

      /*************************************************************** 
   	* Returns the all Icicle's yPositions
   	* @return   yPositions of Icicle
   	**************************************************************/
      
      public int[] getYPoints()
      {
         return myYPoints;
      }
      /*************************************************************** 
   	* Returns the Icicles's Height
   	* @return   height
   	**************************************************************/
      public int getHeight() 
      { 
         return myYPoints[1] - myYPoints[2];
      }
      /*************************************************************** 
   	* Returns the Icicles's Base
   	* @return   base
   	**************************************************************/
      public int getBase() 
      { 
         return myXPoints[1] - myXPoints[0];
      }
      /*************************************************************** 
   	* Returns the Icicles's Color
   	* @return   color
   	**************************************************************/
      public Color getColor() 
      { 
         return myColor;
      }
      /***************************************************************
   	* Sets the xPositions to the specified input array.
   	* @param xPoints	 assigns xPoints to xPositions
   	**************************************************************/

      public void setX(int[] xPoints)
      {
          myXPoints = new int[]{xPoints[0],xPoints[1],xPoints[2]};
         
      } 
      /***************************************************************
   	* Sets the yPositions to the specified input array.
   	* @param yPoints	 assigns yPoints to yPositions
   	**************************************************************/
      public void setY(int[] yPoints)
      {
         myYPoints = new int[]{yPoints[0], yPoints[1], yPoints[2]};

      } 
      /***************************************************************
   	* Sets the Color to the specified color.
   	* @param c	 assigns c to color
   	**************************************************************/
      public void setColor(Color c)
      {
         myColor = c;
      }
      
     
      
      /***************************************************************
   	* Draws a polygon with 3 points, a specified Color,and with an array of points
   	* @param myBuffer	 assigns myBuffer to be drawn on
   	**************************************************************/
      public void draw(Graphics myBuffer) 
      {
         myBuffer.setColor(myColor);
         myBuffer.fillPolygon(myXPoints, myYPoints, nPoint);
        
      }
      
      /***************************************************************
   	* Reset to random xPosition and random yPosition above the frame, keeping constant dimensions
   	* @param icicle assigns icicle to be affected
   	**************************************************************/

      public void reset()
      {
      int point = (int)(Math.random() * (800 - getBase()));
      int[] newXPoints = new int[]{point, point + getBase(), point + (getBase() / 2)};
      setX(newXPoints);
      int pratek = -1 * ((int)(Math.random() * 1000));
      int[] newYPoints = new int[]{pratek, pratek, pratek - getHeight()};
      setY(newYPoints);
      
      }

      
   }
