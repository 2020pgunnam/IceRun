   


   import java.awt.*;
   import java.util.*;
   /*****************************************************************
	* Invisible is a class that maintains information about its xPoints and yPoints. 
   * An Invisible knows how to return its the get the x and y value of its tip, its height,
	* and its base length.
   * The Invisible can also set its length as well as height.  
	
   * @author Tony Liang and Prateek Gunnam
	* @version 1
	****************************************************************/
   public class Invisible extends Icicle
   {
      private int[] myXPoints;  
      private int[] myYPoints;
      private final int nPoint = 3;
      private Color myColor; 
     
     /************************************************************* 
   	* Default constructor with predetermined xPoints, yPoints, 
      * initial yPosition specified by y. Sets pre-determined diameter.
   	**************************************************************/

      public Invisible()     
      {
         myXPoints = new int[]{200,250,225};
         myYPoints = new int[]{0, 0, 50};
         myColor = Color.WHITE;
      
      /************************************************************* 
   	* Constructs an Invisible with initial xPosition specified by xPoints and its
      * initial yPosition specified by yPoints and initial Color specified by c
   	* @param xPoints    initial xPosition
      * @param yPoints    initial yPosition
      * @param c          initial color
   	**************************************************************/
 
      }
      public Invisible(int[] xPoints, int[] yPoints, Color c)
      {  
        super(xPoints, yPoints, c);
         
      }
      /***************************************************************
   	* Draws a polygon with 3 points, a specified Color,and with an array of points
   	* @param myBuffer	 assigns myBuffer to be drawn on
   	**************************************************************/

         public void draw(Graphics myBuffer) 
      {
         myBuffer.setColor(myColor);
         myBuffer.fillPolygon(myXPoints, myYPoints, nPoint);
        
      }
      
   }
