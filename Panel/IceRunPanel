   //Name:    Date:
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
public class IceRunPanel extends JPanel
{
   private static final int FRAME = 800;
   private static final Color BACKGROUND = Color.WHITE;
   

   private BufferedImage myImage;
   private Graphics myBuffer; 
   private Timer t;
   private Icicle[] bob;
   private SpeedPlayer speed;
   private Player player;
   private ImageIcon fire, right, left;
   private int playerSpeed;
   private double tmpPwr;
   private boolean upDir, downDir, leftDir, rightDir, boolPwr;
   
   

		  
   public IceRunPanel()
   {  
      playerSpeed = 8;
      myImage =  new BufferedImage(FRAME, FRAME, BufferedImage.TYPE_INT_RGB);
      myBuffer = myImage.getGraphics();
      myBuffer.setColor(BACKGROUND);
      myBuffer.fillRect(0, 0, FRAME,FRAME);
     
      
     fire = new ImageIcon("images/fire.jpg");
     right = new ImageIcon("images/RightPlayer.jpg");
     left = new ImageIcon("images/LeftPlayer.jpg");
     
     bob = new Icicle[20];
      
     for(int x = 0; x < bob.length; x++)
        bob[x] = new Icicle();
      
      speed = new SpeedPlayer(20,20, Color.RED);
      speed.randPos(FRAME,FRAME);
      player = new Player(2,right);
    
     
      addKeyListener(new Key());
      setFocusable(true);
      t = new Timer(5, new Listener());
      t.start();
   
         
   }
  
   private class Key extends KeyAdapter
   
   {  
      public void keyReleased(KeyEvent e) 
      {
    
         if(e.getKeyCode() == KeyEvent.VK_RIGHT)
         {  
            rightDir = false;
         }
         else
            rightDir = true;
      
         if(e.getKeyCode() == KeyEvent.VK_LEFT)
         {  
            leftDir = false;
                    
         }
         else
            leftDir = true;
      
         if(e.getKeyCode() == KeyEvent.VK_UP)
         {  
            upDir = false;

         }
         else
            upDir = true;
         
         
         if(e.getKeyCode() == KeyEvent.VK_DOWN  )
         {  
            downDir = false;
          
         }
         else
            downDir = true;
      
       
      
   
   

   }

   
      public void keyPressed(KeyEvent e)
      {
      
         if(e.getKeyCode() == KeyEvent.VK_RIGHT)
         {  
           if( rightDir = true){
            player.setImage(right);
            player.setX(player.getX() + playerSpeed);
            }
         }
      
         if(e.getKeyCode() == KeyEvent.VK_LEFT)
         {  
             if( leftDir = true){

            player.setImage(left);
            player.setX(player.getX() - playerSpeed); 
            }       
         }
      
         if(e.getKeyCode() == KeyEvent.VK_UP)
         {  
             if( upDir = true){

            player.setY(player.getY() - playerSpeed);
            }
         }
         
         
         if(e.getKeyCode() == KeyEvent.VK_DOWN  )
         {  
            if( downDir = true){
            player.setY(player.getY() + playerSpeed);
            }
         }
      
       
      }
   
   }
  
   public void paintComponent(Graphics g)
   {
      g.drawImage(myImage, 0, 0, getWidth(), getHeight(), null);
     
      //paint any new changes, such as icicles falling and player moving
       
      
   }
   private class Listener implements ActionListener
   {
      public void actionPerformed(ActionEvent e)
      {     
         
         myBuffer.setColor(BACKGROUND);
         myBuffer.fillRect(0,0,FRAME,FRAME);
        
         tmpPwr = (Math.random() * 1000);
        
        
                  
        
         player.draw(myBuffer,player.getImage());

         //affects SpeedPlayer 
                  
         
         if(tmpPwr > 950)
         boolPwr = true;
         
         if(boolPwr == true)
         speed.draw(myBuffer, fire);

         for(int x = 0; x < speed.getDiameter(); x++){
         if(speed.getX() + x == player.getX() + x && speed.getY() + x == player.getY() + x)
         {
            speed.setX(9000);
            speed.randPos(FRAME, FRAME);
         }
         }
         
         for(int x = 0; x < bob.length; x++)
         {  
            bob[x].setColor(Color.BLUE);
            bob[x].draw(myBuffer);
            drop(bob[x], 3);
                       
         
            if (bob[x].getY(0) >= 800 && bob[x].getY(1) >= 800)
            {
               bob[x].reset();
            }
            
            
         
         }
                 
        
         repaint();
  
      }
   }
   private void drop(Icicle icicle, int speed)
   {	
      int[] array = icicle.getYPoints();
      
      for(int x = 0; x < array.length; x++)
         array[x] = array[x] + speed;
      icicle.setY(array);
      
   
   }
   
   /*private void reset(Icicle icicle)
   {
   int point = (int)(Math.random() * 750);
   int[] newXPoints = new int[]{point, point + 50, point + 25};
   icicle.setX(newXPoints);
   int[] newYPoints = new int[]{-100,-100,-50};
   icicle.setY(newYPoints);
   
   }*/
   
   
   
   
   
}   

   
      
  
