   //Name:    Date:
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;

public class IceRunPanel extends JPanel implements KeyListener
{
   private static final int FRAME = 800;
   private static final Color BACKGROUND = Color.WHITE;
   

   private BufferedImage myImage;
   private Graphics myBuffer; 
   private Timer t, timer;
   private Icicle[] bob;
   private SpeedPlayer speed;
   private Melt melt;
   private SlowIcicle slow;
   private Multiplier two, four;
   private Player player;
   private ImageIcon fire, right, left, speedPic, twoPic, fourPic, slowPic;
   private int playerSpeed, dropSpeed, count;
   private double tmpPwr;
   private boolean  boolSpeedPwr, boolSlowPwr, boolMeltPwr, boolTimer, boolSlowDraw, boolSpeedDraw, boolMeltDraw;
  
   
   

		  
   public IceRunPanel() 
   {  
      boolTimer = false;
      count = 15;
      dropSpeed = 3;
      playerSpeed = 9;
      myImage =  new BufferedImage(FRAME, FRAME, BufferedImage.TYPE_INT_RGB);
      myBuffer = myImage.getGraphics();
      myBuffer.setColor(BACKGROUND);
      myBuffer.fillRect(0, 0, FRAME,FRAME);
     
      
     fire = new ImageIcon("images/fire.png");
     speedPic = new ImageIcon("images/speed.png");
     right = new ImageIcon("images/RightPlayer.png");
     left = new ImageIcon("images/LeftPlayer.png");
     twoPic = new ImageIcon("images/two.png");
     fourPic = new ImageIcon("images/four.png");
     slowPic = new ImageIcon("images/slow.png");
     
     bob = new Icicle[15];
      
     for(int x = 0; x < bob.length; x++)
        bob[x] = new Icicle();
      
      speed = new SpeedPlayer(20,20, Color.BLACK);
      speed.randPos(FRAME,FRAME);
      
      slow = new SlowIcicle(20,20, Color.YELLOW);
      slow.randPos(FRAME,FRAME);
      
      melt = new Melt(2,2,Color.RED);
      melt.randPos(FRAME,FRAME);
      
      player = new Player(2,right);
    
     
      addKeyListener(this);
      setFocusable(true);
      
      t = new Timer(5, new Listener());
      t.start();
      
    
         
   }
      public void keyTyped(KeyEvent e)
      {
      }
  
      public void keyReleased(KeyEvent e) 
      {
      if(e.getKeyCode() == KeyEvent.VK_RIGHT)
         {  
            
            player.setX(player.getX());
            
         }
      
         if(e.getKeyCode() == KeyEvent.VK_LEFT)
         {  
            
           
            player.setX(player.getX() ); 
                   
         }
      
         if(e.getKeyCode() == KeyEvent.VK_UP)
         {  
            
            player.setY(player.getY());
            
         }
         
         
         if(e.getKeyCode() == KeyEvent.VK_DOWN)
         { 
            player.setY(player.getY());
         }

      }

   
      public void keyPressed(KeyEvent e)
      {
      
         if(e.getKeyCode() == KeyEvent.VK_RIGHT)
         {  
            
            player.setImage(right);
            player.setX(player.getX() + playerSpeed);
            
            
         }
      
         if(e.getKeyCode() == KeyEvent.VK_LEFT)
         {  
            
            player.setImage(left);
            player.setX(player.getX() - playerSpeed); 
                               
         }
      
         if(e.getKeyCode() == KeyEvent.VK_UP)
         {  
            
            player.setY(player.getY() - playerSpeed);
            
         }
         
         
         if(e.getKeyCode() == KeyEvent.VK_DOWN)
         { 
            player.setY(player.getY() + playerSpeed);
         }
      
       
      }


        
   
  
   public void paintComponent(Graphics g)
   {
      g.drawImage(myImage, 0, 0, getWidth(), getHeight(), null);
     
      //paint any new changes, such as icicles falling and player moving
       
      
   }
   private class Listener implements ActionListener
   {
      public void actionPerformed(ActionEvent e)
      {     
         
         myBuffer.setColor(BACKGROUND);
         myBuffer.fillRect(0,0,FRAME,FRAME);
        
         tmpPwr = (Math.random() * 100000);
        
        
                  
        
         player.draw(myBuffer,player.getImage());
         
         //affects SlowIcicle
        
         
         if(tmpPwr < 5)
         boolSlowPwr = true;
         
          
         if(boolSlowPwr == true)
         {
         slow.draw(myBuffer, slowPic);
         boolSlowDraw = true;
         }
         
        
         if(player.getImage() == right)
         {
         if((player.getX() + 75>= slow.getX() && player.getX() + 75 <= (slow.getX() + slow.getDiameter() * 3)) && boolSlowDraw == true)
         {  
            boolSlowPwr = false;
            slow.setX(9000);
            slow.setY(9000);
            slow.randPos(FRAME,FRAME);
            tmpPwr = 0;
            boolTimer = true;
            boolSlowDraw = false;
          }
         

         }
         else if(player.getImage() == left)
         {
         if((player.getX() + 60 >= slow.getX() && player.getX() + 60 <= (slow.getX() + slow.getDiameter() * 3)) &&  boolSlowDraw == true)
         {  
            boolSlowPwr = false;
            slow.setX(9000);
            slow.setY(9000);
            slow.randPos(FRAME,FRAME);
            tmpPwr = 0;
            boolTimer = true;
            boolSlowDraw = false;
            
         }
         }
         
         
         

         //affects SpeedPlayer 
                  
          if(tmpPwr > 99995)
         boolSpeedPwr = true;
         
          
         if(boolSpeedPwr == true)
         {
         speed.draw(myBuffer, speedPic);
         boolSpeedDraw = true;
         }

         
         if(player.getImage() == right)
         {
         if((player.getX() + 75>= speed.getX() && player.getX() + 75 <= (speed.getX() + speed.getDiameter() * 3)) && boolSpeedDraw == true)
         {
            boolSpeedPwr = false;
            speed.setX(9000);
            speed.setY(9000);
            speed.randPos(FRAME, FRAME);
            tmpPwr = 0;
            boolTimer = true;
            boolSpeedDraw = false;
           
            
         }
         

         }
         else if(player.getImage() == left)
         {
         if((player.getX() + 60 >= speed.getX() && player.getX() + 60 <= (speed.getX() + speed.getDiameter() * 3)) && boolSpeedDraw == true)
         {
            boolSpeedPwr = false;
            speed.setX(9000);
            speed.setY(9000);
            speed.randPos(FRAME, FRAME);
            tmpPwr = 0;
            boolTimer = true;
            boolSpeedDraw = false;
    
         }
         }
         
         //affects Melt
         if(tmpPwr < 99595 && tmpPwr > 99585)
         boolMeltPwr = true;
         
          
         if(boolMeltPwr == true)
         {
         melt.draw(myBuffer, fire);
         boolMeltDraw = true;
         }

        
         if(player.getImage() == right)
         {
         if((player.getX() + 75>= melt.getX() && player.getX() + 75 <= (melt.getX() + melt.getDiameter() * 3)) && boolMeltDraw == true)
         {
            boolMeltPwr = false;
            melt.setX(9000);
            melt.setY(9000);
            melt.randPos(FRAME, FRAME);
            tmpPwr = 0;
            boolTimer = true;
            boolMeltDraw = false;
         }
         

         }
         else if(player.getImage() == left)
         {
         if((player.getX() + 60 >= melt.getX() && player.getX() + 60 <= (melt.getX() + melt.getDiameter() * 3)) && boolMeltDraw == true)
         {
            boolMeltPwr = false;
            melt.setX(9000);
            melt.setY(9000);
            melt.randPos(FRAME, FRAME);
            tmpPwr = 0;
            boolTimer = true;
            boolMeltDraw = false;
         }
         }
         
           if(boolTimer == true)
         {  
            myBuffer.setColor(Color.BLACK);
            myBuffer.setFont(new Font("Monospaced", Font.BOLD, 16));
            myBuffer.drawString("Count: " + count,650 , 750);
            count--;
         }   
         if(count == 0)
         {
         count = 15;
         boolTimer = false;
         } 
         
         //PowerUp Moving
         if(speed.getX() == slow.getX())
         speed.randPos(FRAME,FRAME);
         else if(speed.getX() == melt.getX())
         speed.randPos(FRAME,FRAME);

         
         
         //affects Icicle array         
         for(int x = 0; x < bob.length; x++)
         {  
            bob[x].setColor(Color.BLUE);
            bob[x].draw(myBuffer);
            drop(bob[x], dropSpeed);
                       
         
            if (bob[x].getY(0) >= 800 && bob[x].getY(1) >= 800)
            {
               bob[x].reset();
            }
            
            
         
         }
           
         
        
         repaint();
  
      }
   }
   private void drop(Icicle icicle, int speed)
   {	
      int[] array = icicle.getYPoints();
      
      for(int x = 0; x < array.length; x++)
         array[x] = array[x] + speed;
      icicle.setY(array);
      
   
   }
   
      /*private void reset(Icicle icicle)
   {
   int point = (int)(Math.random() * 750);
   int[] newXPoints = new int[]{point, point + 50, point + 25};
   icicle.setX(newXPoints);
   int[] newYPoints = new int[]{-100,-100,-50};
   icicle.setY(newYPoints);
   
   }*/
   
   
   
   
   
}   

   
      
  
